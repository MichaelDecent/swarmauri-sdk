name: v0.6.0 - Validate Changed Files

on:
  pull_request:
    paths:
      - 'pkgs/**'
  workflow_dispatch:

jobs:
  detect-changed-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.detect.outputs.matrix }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch entire history for diffing

      - name: Get Changed Files (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          echo "Files changed in this pull request:"
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt
          cat changed_files.txt

      - name: Detect changes and generate test matrix
        id: detect
        run: |
          echo "Detecting changes..."

          # Filter only files in pkgs/
          CHANGED_FILES=$(grep '^pkgs/' changed_files.txt || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No changes in pkgs/. Exiting."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          declare -A PACKAGE_TEST_MAP

          # Helper function to find the nearest pyproject.toml up the directory tree
          find_pyproject_root() {
            local path="$1"
            while [ "$path" != "." ] && [ -n "$path" ]; do
              if [ -f "$path/pyproject.toml" ]; then
                echo "$path"
                return
              fi
              # Move one directory up
              path="$(dirname "$path")"
            done
            # If none found, return empty
            echo ""
          }

          for FILE in $CHANGED_FILES; do
            # Determine the directory of this file (relative to root)
            DIR=$(dirname "$FILE")

            # Find the package root containing pyproject.toml
            PACKAGE_ROOT=$(find_pyproject_root "$DIR")
            if [ -z "$PACKAGE_ROOT" ]; then
              # If we can't find a pyproject.toml by walking upwards, 
              # you could handle it as a fallback or skip
              echo "No pyproject.toml found for $FILE"
              continue
            fi

            # The name of the package is often the last directory in the path with the pyproject.toml
            PACKAGE_NAME=$(basename "$PACKAGE_ROOT")

            # If the changed file is a test file, store it directly. Otherwise, look for associated tests.
            if echo "$FILE" | grep -qE '/tests/.*_test\.py$'; then
              # Convert from `pkgs/package_name/tests/xyz_test.py` to `tests/xyz_test.py`
              RELATIVE_TEST_FILE=$(echo "$FILE" | sed "s|^$PACKAGE_ROOT/||")
              PACKAGE_TEST_MAP["$PACKAGE_NAME"]="${PACKAGE_TEST_MAP[$PACKAGE_NAME]} $RELATIVE_TEST_FILE"
            else
              # It's not a direct test file, so guess test files by matching the changed filename
              COMPONENT_NAME=$(basename "$FILE" | sed 's/\.py$//')
              TEST_DIR="$PACKAGE_ROOT/tests"

              if [ -d "$TEST_DIR" ]; then
                # Find any test file that includes the changed component name
                MATCHING_TEST_FILES=$(find "$TEST_DIR" -type f -iname "*${COMPONENT_NAME}*_test.py")
                for TEST_FILE in $MATCHING_TEST_FILES; do
                  RELATIVE_TEST_FILE=$(echo "$TEST_FILE" | sed "s|^$PACKAGE_ROOT/||")
                  PACKAGE_TEST_MAP["$PACKAGE_NAME"]="${PACKAGE_TEST_MAP[$PACKAGE_NAME]} $RELATIVE_TEST_FILE"
                done
              fi
            fi
          done

          # Build a JSON matrix
          MATRIX="["

          for PKG in "${!PACKAGE_TEST_MAP[@]}"; do
            # Deduplicate test files
            UNIQUE_TEST_FILES=$(echo "${PACKAGE_TEST_MAP[$PKG]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
            MATRIX="$MATRIX{\"package\":\"$PKG\",\"tests\":\"${UNIQUE_TEST_FILES}\"},"
          done

          # Remove trailing comma if any
          MATRIX="${MATRIX%,}]"

          echo "Final test matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-tests:
    needs: detect-changed-files
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changed-files.outputs.matrix != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        package_tests: ${{ fromJSON(needs.detect-changed-files.outputs.matrix) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Install and test
        run: |
          PKG="${{ matrix.package_tests.package }}"
          TEST_FILES="${{ matrix.package_tests.tests }}"
          
          echo "Package root: pkgs/$PKG"
          echo "Test files: $TEST_FILES"
          
          # Install
          cd pkgs/$PKG
          poetry lock
          poetry install --no-cache --all-extras -vv

          # Run tests
          poetry run pytest -v $TEST_FILES -n 4 --dist=loadfile --tb=short --json-report --json-report-file=pytest_results.json || true
