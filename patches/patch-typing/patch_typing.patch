diff --git a/pkgs/typing/pyproject.toml b/pkgs/typing/pyproject.toml
index c038a9f..eb50ea8 100644
--- a/pkgs/typing/pyproject.toml
+++ b/pkgs/typing/pyproject.toml
@@ -1,6 +1,6 @@
 [project]
 name = "swarmauri-typing"
-version = "0.6.2.dev4"
+version = "0.6.2.dev5"
 description = "This repository includes typing used in the Swarmauri framework."
 authors = [
     { name = "Jacob Stewart", email = "jacob@swarmauri.com" },
diff --git a/pkgs/typing/swarmauri_typing/Intersection.py b/pkgs/typing/swarmauri_typing/Intersection.py
index 6c4aeac..39fb483 100644
--- a/pkgs/typing/swarmauri_typing/Intersection.py
+++ b/pkgs/typing/swarmauri_typing/Intersection.py
@@ -1,9 +1,8 @@
-from typing import (
-    Type, TypeVar, Union, Any, Annotated, Tuple
-)
+from typing import Type, TypeVar, Union, Any, Annotated, Tuple
 
 T = TypeVar("T")
 
+
 class IntersectionMetadata:
     def __init__(self, classes: Tuple[Type[T]]):
         self.classes = classes
@@ -12,6 +11,7 @@ class IntersectionMetadata:
         # Return a more 'developer-focused' string, e.g.:
         return f"IntersectionMetadata(classes={self.classes!r})"
 
+
 # The Intersection metaclass as provided.
 class Intersection(type):
     """
diff --git a/pkgs/typing/swarmauri_typing/UnionFactory.py b/pkgs/typing/swarmauri_typing/UnionFactory.py
index 962a27c..288a5d9 100644
--- a/pkgs/typing/swarmauri_typing/UnionFactory.py
+++ b/pkgs/typing/swarmauri_typing/UnionFactory.py
@@ -1,5 +1,13 @@
 from typing import (
-    Type, TypeVar, Callable, List, Union, Any, Annotated, get_args, Optional
+    Type,
+    TypeVar,
+    Callable,
+    List,
+    Union,
+    Any,
+    Annotated,
+    get_args,
+    Optional,
 )
 
 T = TypeVar("T")
@@ -11,6 +19,7 @@ class UnionFactoryMetadata:
     You can store anything you like in here (e.g., the original input
     or other context data).
     """
+
     def __init__(self, data: Any, name: Optional[str] = None):
         self.data = data
         self.name = name or self.__class__.__name__
@@ -19,6 +28,7 @@ class UnionFactoryMetadata:
         # Return a more 'developer-focused' string, e.g.:
         return f"UnionFactoryMetadata(name={self.name!r}, data={self.data!r})"
 
+
 class UnionFactory:
     """
     A configurable factory for creating Annotated Union types.
@@ -32,7 +42,7 @@ class UnionFactory:
         self,
         bound: Callable[[Type[T]], List[type]],
         name: "str" = None,
-        annotation_extenders: List[Any] = None
+        annotation_extenders: List[Any] = None,
     ):
         """
         :param bound:
@@ -51,7 +61,10 @@ class UnionFactory:
         Appends 'new_metadata' to an existing Annotated type,
         or wraps a bare type in Annotated if it's not already Annotated.
         """
-        if not (hasattr(annotated_type, '__origin__') and annotated_type.__origin__ is Annotated):
+        if not (
+            hasattr(annotated_type, "__origin__")
+            and annotated_type.__origin__ is Annotated
+        ):
             return Annotated[annotated_type, new_metadata]
 
         args = get_args(annotated_type)
@@ -80,10 +93,14 @@ class UnionFactory:
 
         # If no types are returned, fall back to Annotated[Any, UnionFactoryMetadata]
         if not union_members:
-            final_annotated = Annotated[Any, UnionFactoryMetadata(data=model_name, name=self.name)]
+            final_annotated = Annotated[
+                Any, UnionFactoryMetadata(data=model_name, name=self.name)
+            ]
         else:
             union_type = Union[tuple(union_members)]
-            final_annotated = Annotated[union_type, UnionFactoryMetadata(data=model_name, name=self.name)]
+            final_annotated = Annotated[
+                union_type, UnionFactoryMetadata(data=model_name, name=self.name)
+            ]
 
             # Add any additional metadata
             for extension in self._annotation_extenders:
diff --git a/pkgs/typing/swarmauri_typing/__init__.py b/pkgs/typing/swarmauri_typing/__init__.py
index 397a07d..d149ebf 100644
--- a/pkgs/typing/swarmauri_typing/__init__.py
+++ b/pkgs/typing/swarmauri_typing/__init__.py
@@ -2,10 +2,10 @@ from .UnionFactory import UnionFactory, UnionFactoryMetadata
 from .Intersection import Intersection, IntersectionMetadata
 
 __all__ = [
-    "UnionFactory", 
+    "UnionFactory",
     "UnionFactoryMetadata",
     "Intersection",
-    "IntersectionMetadata"
+    "IntersectionMetadata",
 ]
 
 try:
diff --git a/pkgs/typing/tests/test_swarmauri_typing__init__.py b/pkgs/typing/tests/test_swarmauri_typing__init__.py
index daf38c5..4cb1168 100644
--- a/pkgs/typing/tests/test_swarmauri_typing__init__.py
+++ b/pkgs/typing/tests/test_swarmauri_typing__init__.py
@@ -1,19 +1,33 @@
 import swarmauri_typing
 
+
 def test_all_members():
     """Test that __all__ contains the expected members."""
-    expected = {"UnionFactory", "UnionFactoryMetadata", "Intersection", "IntersectionMetadata"}
+    expected = {
+        "UnionFactory",
+        "UnionFactoryMetadata",
+        "Intersection",
+        "IntersectionMetadata",
+    }
     assert set(swarmauri_typing.__all__) == expected
 
+
 def test_imports():
     """Test that the public classes and metadata can be imported correctly."""
-    from swarmauri_typing import UnionFactory, UnionFactoryMetadata, Intersection, IntersectionMetadata
+    from swarmauri_typing import (
+        UnionFactory,
+        UnionFactoryMetadata,
+        Intersection,
+        IntersectionMetadata,
+    )
+
     # Basic checks to ensure they are imported (more detailed tests should be written for their functionality)
     assert UnionFactory is not None
     assert UnionFactoryMetadata is not None
     assert Intersection is not None
     assert IntersectionMetadata is not None
 
+
 def test_version():
     """Test that the __version__ attribute exists and is a string."""
     version = swarmauri_typing.__version__
