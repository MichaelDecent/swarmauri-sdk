[tool.poetry]
name = "swarmauri-community"
version = "0.5.3.dev3"
description = "This repository includes Swarmauri community components."
authors = ["Jacob Stewart <jacob@swarmauri.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "http://github.com/swarmauri/swarmauri-sdk"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
captcha = "*"
chromadb = { version = "*", optional = true }
duckdb = { version = "*", optional = true }
folium = { version = "*", optional = true }
gensim = { version = "*", optional = true }
gradio = { version = "*", optional = true }
leptonai = { version = "0.22.0", optional = true }
neo4j = { version = "*", optional = true }
nltk = { version = "*", optional = true }
pandas = "*"
psutil = { version = "*", optional = true }
pygithub = { version = "*", optional = true }
python-dotenv = "*"
qrcode = { version = "*", optional = true }
redis = { version = "^4.0", optional = true }
swarmauri = "==0.5.3.dev1"
textstat = { version = "*", optional = true }
transformers = { version = ">=4.45.0", optional = true }
typing_extensions = "*"
tiktoken = { version = "*", optional = true }
pymupdf = { version = "*", optional = true }
annoy = { version = "*", optional = true }
qdrant_client = { version = "*", optional = true }
weaviate = { version = "*", optional = true }
pinecone-client = { version = "*", optional = true, extras = ["grpc"] }
PyPDF2 = { version = "*", optional = true }
pypdftk = { version = "*", optional = true }
weaviate-client = { version = "*", optional = true }
protobuf = { version = "^3.20.0", optional = true }

[tool.poetry.extras]
# Grouped optional dependencies
nlp = ["nltk", "gensim", "textstat"]
ml_toolkits = ["transformers", "annoy"]
visualization = ["folium"]
storage = ["redis", "duckdb", "neo4j", "chromadb", "qdrant_client", "weaviate", "pinecone-client"]
document_processing = ["PyPDF2", "pymupdf", "pypdftk"]
cloud_integration = ["psutil", "qrcode", "pygithub"]
gradio = ["gradio"]
model_clients = ["leptonai"]
tiktoken = ["tiktoken"]

# Full installation
full = [
    "nltk", "gensim", "textstat",
    "transformers", "annoy",
    "folium",
    "redis", "duckdb", "neo4j", "chromadb", "qdrant_client", "weaviate", "pinecone-client",
    "PyPDF2", "pymupdf", "pypdftk",
    "psutil", "qrcode", "pygithub",
    "gradio",
    "leptonai",
    "tiktoken"
]

[tool.poetry.dev-dependencies]
flake8 = "^7.0"
pytest = "^8.0"
pytest-asyncio = ">=0.24.0"
pytest-xdist = "^3.6.1"
python-dotenv = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = ["combined", "scripts"]

markers = [
    "test: standard test",
    "unit: Unit tests",
    "integration: Integration tests",
    "acceptance: Acceptance tests",
    "experimental: Experimental tests"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
asyncio_default_fixture_loop_scope = "function"
