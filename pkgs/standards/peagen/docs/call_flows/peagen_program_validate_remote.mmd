sequenceDiagram
    participant User
    participant CLI as peagen remote program validate
    participant FS as File System
    participant Schema as JSONSchema
    User ->> CLI: Run `peagen remote program validate <target> [--license-allow X --license-deny Y]`
    CLI ->> FS: Determine workspace descriptor(s):
    alt if target is a JSON file:
        CLI -->> FS: use it
    else if target is a directory:
        CLI -->> FS: collect all `.peagen/*_workspace.json` files
    end
    CLI ->> FS: Read each descriptor JSON
    CLI ->> Schema: Validate descriptor data against WORKSPACE_SCHEMA
    Schema -->> CLI: Return validation result for each (errors if any)
    alt if any schema errors
        CLI -->> User: Print "[ERROR] ... <descriptor>: <message>" for each error
        CLI -->> User: Exit with failure code
    else
        CLI -->> User: Print "schema ✅" (schema valid)
        opt unless --schema-only
            CLI ->> FS: Scan workspace files for `SPDX-License-Identifier:` tags
            CLI ->> CLI: Collect detected license identifiers
            alt if --license-allow list provided
                CLI ->> CLI: Check for any detected license *not* matching allowed patterns
                alt if found:
                   CLI -->> User: Error "[ERROR] licenses not allowed: [...]"
                   CLI -->> User: Exit (failure)
                end
            end
            alt if --license-deny list provided
                CLI ->> CLI: Check for any detected license matching denied patterns
                alt if found:
                   CLI -->> User: Error "[ERROR] licenses explicitly denied: [...]"
                   CLI -->> User: Exit (failure)
                end
            end
            CLI -->> User: Print "license ✅" if all licenses pass rules
        end
    end
