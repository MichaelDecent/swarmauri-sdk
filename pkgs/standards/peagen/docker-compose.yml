version: "3.9"

# -----------------------------------------------------------------
# Optional root dir makes switching between dev / prod trivial
# -----------------------------------------------------------------
x-paths: &paths
  DATA_ROOT:    ${DATA_ROOT:-./data}          # override in .env or CI
  CONFIG_ROOT:  ${CONFIG_ROOT:-./config}      # idem

services:
  # ────────────────────────────────────────────────
  # MinIO
  # ────────────────────────────────────────────────
  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    container_name: minio
    command: server /data --console-address ":9001"
    ports: [ "9000:9000", "9001:9001" ]
    environment:
      MINIO_ROOT_USER:      ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD:  ${MINIO_ROOT_PASSWORD}
      MINIO_CONFIG_DIR:     /root/.minio
    volumes:
      - "${DATA_ROOT}/minio/data:/data"               # bucket objects
      - "${CONFIG_ROOT}/minio:/root/.minio"           # users / policies
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks: [app_net]
    secrets: [minio_root_password]

  # ────────────────────────────────────────────────
  # Redis
  # ────────────────────────────────────────────────
  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      redis-server
        --requirepass $${REDIS_PASSWORD}
        --appendonly yes
        --dir /data
    ports: [ "6379:6379" ]
    volumes:
      - "${DATA_ROOT}/redis:/data"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks: [app_net]
    secrets: [redis_password]

  # ────────────────────────────────────────────────
  # PostgreSQL
  # ────────────────────────────────────────────────
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER:      ${POSTGRES_USER}
      POSTGRES_PASSWORD:  ${POSTGRES_PASSWORD}
      POSTGRES_DB:        ${POSTGRES_DB}
      PGPORT:             5342
    ports: [ "5342:5342" ]
    volumes:
      - "${DATA_ROOT}/postgres:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks: [app_net]
    secrets: [postgres_password]

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL:    ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports: [ "5050:80" ]
    volumes:
      - "${CONFIG_ROOT}/pgadmin:/var/lib/pgadmin"
    restart: unless-stopped
    networks: [app_net]
    secrets: [pgadmin_password]

  # Nginx Proxy Manager
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "81:81"     # Admin UI
    volumes:
      - "${CONFIG_ROOT}/npm/data:/data"
      - "${CONFIG_ROOT}/npm/letsencrypt:/etc/letsencrypt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:81/api/status"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks: [app_net]

# -----------------------------------------------------------------
# Swarm / Compose v3 secrets
# -----------------------------------------------------------------
secrets:
  minio_root_password: {file: ./secrets/minio_root_password.txt}
  redis_password:      {file: ./secrets/redis_password.txt}
  postgres_password:   {file: ./secrets/postgres_password.txt}
  pgadmin_password:    {file: ./secrets/pgadmin_password.txt}

networks:
  app_net: {driver: bridge}
