[tool.poetry]
name = "swarmauri-monorepo"
version = "0.6.0.dev153"
description = "Monorepo for multiple interdependent Swarmauri Python packages"
authors = ["Jacob Stewart <jacob@swarmauri.com>"]
# Disables packaging mode
package-mode = false


[tool.poetry.dependencies]
python = ">=3.10,<3.13"
pydantic = "^2.0"

# Path dependencies (editable installs by default)
swarmauri_core = {path = "../pkgs/core"}
swarmauri_base = {path = "../pkgs/base"}
swarmauri = {path = "../pkgs/swarmauri"}
swarmauri_standard = {path = "../pkgs/standards/swarmauri_standard", extras = ["full"]}

# Extra First Class Citizens
swarmauri_vectorstore_doc2vec = {path = "../pkgs/standards/swarmauri_vectorstore_doc2vec", optional = true}
swarmauri_embedding_doc2vec = {path = "../pkgs/standards/swarmauri_embedding_doc2vec", optional = true}
swarmauri_tool_matplotlib = {path = "../pkgs/standards/swarmauri_tool_matplotlib", optional = true}
swarmauri_parser_keywordextractor = {path = "../pkgs/standards/swarmauri_parser_keywordextractor", optional = true}
swarmauri_vectorstore_tfidf = {path = "../pkgs/standards/swarmauri_vectorstore_tfidf", optional = true}
swarmauri_embedding_tfidf = {path = "../pkgs/standards/swarmauri_embedding_tfidf", optional = true}
swarmauri_embedding_nmf = {path = "../pkgs/standards/swarmauri_embedding_nmf", optional = true}
swarmauri_parser_beautifulsoupelement = {path = "../pkgs/standards/swarmauri_parser_beautifulsoupelement", optional = true}
swarmauri_distance_minkowski = {path = "../pkgs/standards/swarmauri_distance_minkowski", optional = true}

# Standard Plugin Example
#swm_example_package = { path = "./standards/swm_example_package" }

# Community Packages (will push out later)
#swarmauri_community = { path = "./community/swarmauri_community", extras=["full"] }

swarmauri_vectorstore_redis = {path = "../pkgs/community/swarmauri_vectorstore_redis", optional = true}
swarmauri_documentstore_redis = {path = "../pkgs/community/swarmauri_documentstore_redis", optional = true}
swarmauri_vectorstore_qdrant = {path = "../pkgs/community/swarmauri_vectorstore_qdrant", optional = true}
swarmauri_vectorstore_pinecone = {path = "../pkgs/community/swarmauri_vectorstore_pinecone", optional = true}
swarmauri_vectorstore_persistentchromadb = {path = "../pkgs/community/swarmauri_vectorstore_persistentchromadb", optional = true}
swarmauri_vectorstore_neo4j = {path = "../pkgs/community/swarmauri_vectorstore_neo4j", optional = true}
swarmauri_vectorstore_mlm = {path = "../pkgs/community/swarmauri_vectorstore_mlm", optional = true}
swarmauri_vectorstore_duckdb = {path = "../pkgs/community/swarmauri_vectorstore_duckdb", optional = true}
swarmauri_vectorstore_cloudweaviate = {path = "../pkgs/community/swarmauri_vectorstore_cloudweaviate", optional = true}
swarmauri_tool_zapierhook = {path = "../pkgs/community/swarmauri_tool_zapierhook", optional = true}
swarmauri_tool_webscraping = {path = "../pkgs/community/swarmauri_tool_webscraping", optional = true}
swarmauri_tool_textlength = {path = "../pkgs/community/swarmauri_tool_textlength", optional = true}
swarmauri_tool_smogindex = {path = "../pkgs/community/swarmauri_tool_smogindex", optional = true}
swarmauri_tool_sentimentanalysis = {path = "../pkgs/community/swarmauri_tool_sentimentanalysis", optional = true}
swarmauri_tool_sentencecomplexity = {path = "../pkgs/community/swarmauri_tool_sentencecomplexity", optional = true}
swarmauri_tool_qrcodegenerator = {path = "../pkgs/community/swarmauri_tool_qrcodegenerator", optional = true}
swarmauri_tool_lexicaldensity = {path = "../pkgs/community/swarmauri_tool_lexicaldensity", optional = true}
swarmauri_parser_textblob = {path = "../pkgs/community/swarmauri_parser_textblob", optional = true}
swarmauri_state_clipboard = {path = "../pkgs/community/swarmauri_state_clipboard", optional = true}
swarmauri_parser_fitzpdf = {path = "../pkgs/community/swarmauri_parser_fitzpdf", optional = true}
swarmauri_tool_captchagenerator = {path = "../pkgs/community/swarmauri_tool_captchagenerator", optional = true}
swarmauri_parser_entityrecognition = {path = "../pkgs/community/swarmauri_parser_entityrecognition", optional = true}
swarmauri_parser_bertembedding = {path = "../pkgs/community/swarmauri_parser_bertembedding", optional = true}
swarmauri_measurement_mutualinformation = {path = "../pkgs/community/swarmauri_measurement_mutualinformation", optional = true}
swarmauri_parser_pypdf2 = {path = "../pkgs/community/swarmauri_parser_pypdf2", optional = true}
swarmauri_measurement_tokencountestimator = {path = "../pkgs/community/swarmauri_measurement_tokencountestimator", optional = true}
swarmauri_llm_pytesseractimg2text = {path = "../pkgs/community/swarmauri_llm_pytesseractimg2text", optional = true}
swarmauri_tool_entityrecognition = {path = "../pkgs/community/swarmauri_tool_entityrecognition", optional = true}
swarmauri_tool_downloadpdf = {path = "../pkgs/community/swarmauri_tool_downloadpdf", optional = true}
swarmauri_tool_dalechallreadability = {path = "../pkgs/community/swarmauri_tool_dalechallreadability", optional = true}
swarmauri_llm_leptonai = {path = "../pkgs/community/swarmauri_llm_leptonai", optional = true}
swarmauri_tool_gmail = {path = "../pkgs/community/swarmauri_tool_gmail", optional = true}
swarmauri_tool_folium = {path = "../pkgs/community/swarmauri_tool_folium", optional = true}
swarmauri_tool_psutil = {path = "../pkgs/community/swarmauri_tool_psutil", optional = true}
swarmauri_embedding_mlm = {path = "../pkgs/community/swarmauri_embedding_mlm", optional = true}
swarmauri_tool_github = {path = "../pkgs/community/swarmauri_tool_github", optional = true}
swarmauri_vectorstore_annoy = {path = "../pkgs/community/swarmauri_vectorstore_annoy", optional = true}

#swm_example_community_package = { path = "./community/swm_example_community_package" }


[tool.poetry.extras]
# First Class Extras
vectorstore_doc2vec = ["swarmauri_vectorstore_doc2vec"]
embedding_doc2vec = ["swarmauri_embedding_doc2vec"]
tool_matplotlib = ["swarmauri_tool_matplotlib"]
parser_keywordextractor = ["swarmauri_parser_keywordextractor"]
vectorstore_tfidf = ["swarmauri_vectorstore_tfidf"]
embedding_tfidf = ["swarmauri_embedding_tfidf"]
embedding_nmf = ["swarmauri_embedding_nmf"]
parser_beautifulsoupelement = ["swarmauri_parser_beautifulsoupelement"]
distance_minkowski = ["swarmauri_distance_minkowski"]

# Second Class
vectorstore_redis = ["swarmauri_vectorstore_redis"]
documentstore_redis = ["swarmauri_documentstore_redis"]
vectorstore_qdrant = ["swarmauri_vectorstore_qdrant"]
vectorstore_pinecone = ["swarmauri_vectorstore_pinecone"]
vectorstore_persistentchromadb = ["swarmauri_vectorstore_persistentchromadb"]
vectorstore_neo4j = ["swarmauri_vectorstore_neo4j"]
vectorstore_mlm = ["swarmauri_vectorstore_mlm"]
vectorstore_duckdb = ["swarmauri_vectorstore_duckdb"]
vectorstore_cloudweaviate = ["swarmauri_vectorstore_cloudweaviate"]
tool_zapierhook = ["swarmauri_tool_zapierhook"]
tool_webscraping = ["swarmauri_tool_webscraping"]
tool_textlength = ["swarmauri_tool_textlength"]
tool_smogindex = ["swarmauri_tool_smogindex"]
tool_sentimentanalysis = ["swarmauri_tool_sentimentanalysis"]
tool_sentencecomplexity = ["swarmauri_tool_sentencecomplexity"]
tool_qrcodegenerator = ["swarmauri_tool_qrcodegenerator"]
tool_lexicaldensity = ["swarmauri_tool_lexicaldensity"]
parser_textblob = ["swarmauri_parser_textblob"]
state_clipboard = ["swarmauri_state_clipboard"]
parser_fitzpdf = ["swarmauri_parser_fitzpdf"]
tool_captchagenerator = ["swarmauri_tool_captchagenerator"]
parser_entityrecognition = ["swarmauri_parser_entityrecognition"]
parser_bertembedding = ["swarmauri_parser_bertembedding"]
parser_pypdf2 = ["swarmauri_parser_pypdf2"]
measurement_mutualinformation = ["swarmauri_measurement_mutualinformation"]
measurement_tokencountestimator = ["swarmauri_measurement_tokencountestimator"]
tool_gmail = ["swarmauri_tool_gmail"]
tool_downloadpdf = ["swarmauri_tool_downloadpdf"]
tool_dalechallreadability = ["swarmauri_tool_dalechallreadability"]
tool_github = ["swarmauri_tool_github"]
tool_folium = ["swarmauri_tool_folium"]
tool_psutil = ["swarmauri_tool_psutil"]
llm_pytesseractimg2text = ["swarmauri_llm_pytesseractimg2text"]
embedding_mlm = ["swarmauri_embedding_mlm"]

# tool_entityrecognition = ["swarmauri_tool_entityrecognition"] # causes resolution lag
# llm_leptonai = ["swarmauri_llm_leptonai"] # causes resolution lag
# vectorstore_annoy = ["swarmauri_vectorstore_annoy"] # causes resolution lag

# A single "full" extra that includes them all:
full = [
  "swarmauri_vectorstore_doc2vec",
  "swarmauri_embedding_doc2vec",
  "swarmauri_tool_matplotlib",
  "swarmauri_parser_keywordextractor",
  "swarmauri_vectorstore_tfidf",
  "swarmauri_embedding_tfidf",
  "swarmauri_embedding_nmf",
  "swarmauri_parser_beautifulsoupelement",
  "swarmauri_distance_minkowski",
  "swarmauri_vectorstore_redis",
  "swarmauri_documentstore_redis",
  "swarmauri_vectorstore_qdrant",
  "swarmauri_vectorstore_pinecone",
  "swarmauri_vectorstore_persistentchromadb",
  "swarmauri_vectorstore_neo4j",
  "swarmauri_vectorstore_mlm",
  "swarmauri_vectorstore_duckdb",
  "swarmauri_vectorstore_cloudweaviate",
  "swarmauri_tool_zapierhook",
  "swarmauri_tool_webscraping",
  "swarmauri_tool_textlength",
  "swarmauri_tool_smogindex",
  "swarmauri_tool_sentimentanalysis",
  "swarmauri_tool_sentencecomplexity",
  "swarmauri_tool_qrcodegenerator",
  "swarmauri_tool_lexicaldensity",
  "swarmauri_parser_textblob",
  "swarmauri_state_clipboard",
  "swarmauri_parser_fitzpdf",
  "swarmauri_tool_captchagenerator",
  "swarmauri_parser_bertembedding",
  "swarmauri_measurement_mutualinformation",
  "swarmauri_parser_pypdf2",
  "swarmauri_measurement_tokencountestimator",
  "swarmauri_llm_pytesseractimg2text",
  "swarmauri_tool_downloadpdf",
  "swarmauri_tool_dalechallreadability",
  "swarmauri_tool_gmail",
  "swarmauri_tool_folium",
  "swarmauri_tool_psutil",
  "swarmauri_tool_github",
  "swarmauri_parser_entityrecognition",
  "swarmauri_embedding_mlm",
  #"swarmauri_tool_entityrecognition", # causes resolution lag
  #"swarmauri_llm_leptonai", # causes resolution lag
  #"swarmauri_vectorstore_annoy" # causes resolution lag
]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0"
black = "^22.3.0"
toml = "^0.10.2"
#monorepo_manager = { git = "https://github.com/swarmauri/swarmauri-sdk", branch = "mono/0.6.0.dev1", subdirectory="./pkgs/tooling/monorepo_manager" }


[tool.pytest.ini_options]
norecursedirs = ["combined", "scripts"]
asyncio_mode = "auto"

markers = [
    "test: standard test",
    "unit: Unit tests",
    "asyncio: asynscio test",
    "integration: Integration tests",
    "acceptance: Acceptance tests",
    "experimental: Experimental tests"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

